import { stripIndent } from 'common-tags'
import { CommandInteraction, EmbedBuilder } from 'discord.js'
import { Discord, Slash } from 'discordx'
import { In } from 'typeorm'

import {
  CitizenStatus,
  Color,
  Country,
  CountryFlag,
  CountryName,
  MASK_ICON,
  VIRUS_NAME
} from '../../constants'
import { Citizen } from '../../db'
import { CitizenVaccinationService } from '../../services/citizen-vaccination.service'
import { CitizenService } from '../../services/citizen.service'
import { ServerService } from '../../services/server.service'
import { toDiscordTime } from '../utils'

type TotalStats = {
  totalCitizen: number
  infectTotal: number
  infectPerDay: number
  deathTotal: number
  deathPerDay: number
  recoverTotal: number
  recoverPerDay: number
}

type CountryStats = {
  total: number
  infected: number
  deaths: number
  recovered: number
}

@Discord()
export class VirusCommand {
  private readonly serverService = new ServerService()
  private readonly citizenService = new CitizenService()
  private readonly citizenVacinationService = new CitizenVaccinationService()

  @Slash({
    name: '–æ-–≤–∏—Ä—É—Å–µ',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ä—É—Å–µ'
  })
  public async aboutVirus(command: CommandInteraction) {
    const server = await this.serverService.getOne({
      guildId: command.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    // prettier-ignore
    const embed = new EmbedBuilder()
      .setTitle('–°—Ç–∞—Ç—É—Å —ç–ø–∏–¥–µ–º–∏–∏')
      .setColor(Color.Green)
      .setFields([{
        name: '–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        value: 'üü¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ'
      }])
      .setDescription(stripIndent`
        **${VIRUS_NAME}** ‚Äî –æ–±–æ–ª–æ—á–µ—á–Ω—ã–π –æ–¥–Ω–æ—Ü–µ–ø–æ—á–Ω—ã–π –†–ù–ö-–≤–∏—Ä—É—Å. –°–æ–∑–¥–∞–Ω –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–æ–π –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ "Jaba Biotics" –≤ 2019 –≥–æ–¥—É –∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è.

        –í–ø–µ—Ä–≤—ã–µ –≤—ã—è–≤–ª–µ–Ω –≤ –Ω–æ—è–±—Ä–µ 2023 –≥–æ–¥–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–µ –æ–ø–∞—Å–Ω–æ–µ –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ.
      `)

    if (server.isEpidemic) {
      // prettier-ignore
      embed
        .setColor(Color.Red)
        .setFields([{
          name: '–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
          value: 'üî¥ –≠–ø–∏–¥–µ–º–∏—è'
        }])
    }

    await command.reply({
      embeds: [embed]
    })
  }

  @Slash({
    name: '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    description: `–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞ ${VIRUS_NAME} –ø–æ –º–∏—Ä—É`
  })
  public async stats(interaction: CommandInteraction) {
    await interaction.deferReply()

    const server = await this.serverService.getOne({
      guildId: interaction.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    const citizens = await this.citizenService.getList({
      serverId: server.id
    })

    const vaccinations = await this.citizenVacinationService.getList({
      conditions: {
        citizenId: In(citizens.map((c) => c.id))
      }
    })

    const {
      totalCitizen,
      infectTotal,
      infectPerDay,
      deathTotal,
      deathPerDay,
      recoverTotal,
      recoverPerDay
    } = this.getTotalStats(citizens)

    // prettier-ignore
    const embed = new EmbedBuilder()
      .setTitle(`–°–ª—É—á–∞–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è ${VIRUS_NAME} –ø–æ –º–∏—Ä—É:`)
      .setColor(Color.Yellow)
      .setFooter({
        text: `${MASK_ICON} –ù–∞–¥–µ–≤–∞–π—Ç–µ –º–∞—Å–∫–∏ –∏ –±—É–¥—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ã!`
      })
      .setDescription(stripIndent`
        **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${toDiscordTime(new Date())}
        **–í—Å–µ–≥–æ –ø–æ–ø—É–ª—è—Ü–∏–∏:** ${totalCitizen.toLocaleString('ru')}
        **–í—Å–µ–≥–æ –≤–∞–∫—Ü–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${vaccinations.length.toLocaleString('ru')}
        - **–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è ‚ò£Ô∏è**
          - –í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${infectTotal.toLocaleString('ru')}
          - –ù–æ–≤—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏: +${infectPerDay.toLocaleString('ru')}
        - **–°–º–µ—Ä—Ç–∏ ‚ò†Ô∏è**
          - –í—Å–µ–≥–æ —Å–º–µ—Ä—Ç–µ–π: ${deathTotal.toLocaleString('ru')}
          - –ù–æ–≤—ã–µ —Å–º–µ—Ä—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏: +${deathPerDay.toLocaleString('ru')}
        - **–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è ‚ù§Ô∏è‚Äçü©π**
          - –í—Å–µ–≥–æ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: ${recoverTotal.toLocaleString('ru')}
          - –ù–æ–≤—ã–µ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏: +${recoverPerDay.toLocaleString('ru')}

        **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:**
      `)

    const byCountry = new Map<Country, CountryStats>()

    for (const citizen of citizens) {
      const data = byCountry.get(citizen.country) ?? {
        total: 0,
        infected: 0,
        deaths: 0,
        recovered: 0
      }

      if (citizen.status === CitizenStatus.Infected) {
        data.infected++
      }

      if (citizen.status === CitizenStatus.Dead) {
        data.deaths++
      }

      if (citizen.status === CitizenStatus.Recovered) {
        data.recovered++
      }

      data.total++

      if (!byCountry.has(citizen.country)) {
        byCountry.set(citizen.country, data)
      }
    }

    for (const [country, stats] of byCountry) {
      embed.addFields({
        name: `${CountryFlag[country]} ${CountryName[country]}`,
        // prettier-ignore
        value: `–í—Å–µ–≥–æ: ${stats.total.toLocaleString('ru')} | –ó–∞–±–æ–ª–µ–≤—à–∏—Ö: ${stats.infected.toLocaleString('ru')} | –°–º–µ—Ä—Ç–µ–π: ${stats.deaths.toLocaleString('ru')} | –í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: ${stats.recovered.toLocaleString('ru')}`
      })
    }

    await interaction.followUp({
      embeds: [embed]
    })
  }

  private getTotalStats(citizens: Citizen[]): TotalStats {
    const date = formatDate(new Date())

    return {
      // –í—Å–µ–≥–æ –ø–æ–ø—É–ª—è—Ü–∏–∏
      totalCitizen: citizens.length,
      // –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
      infectTotal: citizens.filter((c) => c.status === CitizenStatus.Infected)
        .length,
      infectPerDay: citizens.filter(
        (c) =>
          c.status === CitizenStatus.Infected &&
          formatDate(c.infectionDate!) === date
      ).length,
      // –°–º–µ—Ä—Ç–∏
      deathTotal: citizens.filter((c) => c.status === CitizenStatus.Dead)
        .length,
      deathPerDay: citizens.filter(
        (c) =>
          c.status === CitizenStatus.Dead && formatDate(c.deathDate!) === date
      ).length,
      // –í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è
      recoverTotal: citizens.filter((c) => c.status === CitizenStatus.Recovered)
        .length,
      recoverPerDay: citizens.filter(
        (c) =>
          c.status === CitizenStatus.Recovered &&
          formatDate(c.recoveryDate!) === date
      ).length
    }
  }
}

/**
 * Formats a given date into a string in the format "DD-MM-YYYY".
 * @param date The date to format.
 * @returns The formatted date string.
 */
function formatDate(date: Date): string {
  return `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`
}
