import {
  ApplicationCommandOptionType,
  CommandInteraction,
  EmbedBuilder,
  GuildMember
} from 'discord.js'
import { Discord, Slash, SlashOption } from 'discordx'

import { CitizenStatus, Color, CountryFlag, CountryName } from '../../constants'
import { CitizenService } from '../../services/citizen.service'
import { ServerService } from '../../services/server.service'

@Discord()
export class CitizenCommand {
  private readonly serverService = new ServerService()
  private readonly citizenService = new CitizenService()

  @Slash({
    name: '—Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞'
  })
  public async me(
    @SlashOption({
      type: ApplicationCommandOptionType.User,
      name: '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
      description: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    })
    target: GuildMember,
    interaction: CommandInteraction
  ) {
    await interaction.deferReply()

    const server = await this.serverService.getOne({
      guildId: interaction.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    target = target || interaction.member

    const citizen = await this.citizenService.getOne({
      userId: target.id,
      serverId: server.id
    })

    if (!citizen) {
      throw new Error('Citizen not found')
    }

    const isQuarantined = target.roles.cache.has(
      process.env.QUARANTINED_ROLE_ID!
    )

    // prettier-ignore
    const embed = new EmbedBuilder()
      .setTitle(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ ${target.displayName}`)
      .setThumbnail(target.user.displayAvatarURL())
      .setColor(Color.Blue)
      .setFields([{
        name: '–í–æ–∑—Ä–∞—Å—Ç üßì',
        value: citizen.age.toString(),
        inline: true
      }, {
        name: '–°—Ç—Ä–∞–Ω–∞ üåç',
        value: `${CountryFlag[citizen.country]} ${CountryName[citizen.country]}`,
        inline: true
      }, {
        name: '–°—Ç–∞—Ç—É—Å üìù',
        value: citizen.status,
        inline: true
      }])

    await interaction.followUp({
      embeds: [embed]
    })
  }
}
