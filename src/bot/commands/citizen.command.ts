import { stripIndent } from 'common-tags'
import {
  ApplicationCommandOptionType,
  CommandInteraction,
  EmbedBuilder,
  GuildMember
} from 'discord.js'
import { Discord, Slash, SlashOption } from 'discordx'

import {
  CitizenStatus,
  Color,
  CountryFlag,
  CountryName,
  DEATH_TIME,
  QUARANTIME_TIME
} from '../../constants'
import { CitizenService } from '../../services/citizen.service'
import { ServerService } from '../../services/server.service'
import { toDiscordTime } from '../utils'

@Discord()
export class CitizenCommand {
  private readonly serverService = new ServerService()
  private readonly citizenService = new CitizenService()

  @Slash({
    name: '—Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞'
  })
  public async status(
    @SlashOption({
      type: ApplicationCommandOptionType.User,
      name: '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
      description: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    })
    target: GuildMember,
    interaction: CommandInteraction
  ) {
    if (target?.user.bot) {
      return interaction.reply({
        content: '–ë–æ—Ç, —É–≤—ã, –Ω–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
        ephemeral: true
      })
    }

    await interaction.deferReply()

    const server = await this.serverService.getOne({
      guildId: interaction.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    target = target || interaction.member

    const citizen = await this.citizenService.getOne({
      userId: target.id,
      serverId: server.id,
      opts: {
        relations: {
          vaccinations: true
        }
      }
    })

    if (!citizen) {
      throw new Error('Citizen not found')
    }

    const isQuarantined = target.roles.cache.has(server.quarantineRoleId!)

    const status: string[] = [formatCitizenStatus(citizen.status)]

    if (isQuarantined) {
      status.push('–ù–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ üöß')
    }

    if (citizen.isImmune) {
      if (citizen.vaccinations.length >= 2) {
        status.push('–í–∞–∫—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω üíâ')
      } else {
        status.push('–ù–æ—Å–∏—Ç –º–∞—Å–∫—É üò∑')
      }
    }

    // prettier-ignore
    const embed = new EmbedBuilder()
      .setTitle(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ ${target.displayName}`)
      .setThumbnail(target.user.displayAvatarURL())
      .setColor(Color.Blue)
      .setImage('https://nekodev.one/432x1.png')
      .setFields([{
        name: '–í–æ–∑—Ä–∞—Å—Ç',
        value: citizen.age.toString(),
        inline: true
      }, {
        name: '–°—Ç—Ä–∞–Ω–∞',
        value: `${CountryFlag[citizen.country]} ${CountryName[citizen.country]}`,
        inline: true
      }, {
        name: '–°–æ—Å—Ç–æ—è–Ω–∏–µ',
        value: status.length > 1 ? `- ${status.join('\n- ')}` : status.join('')
      }])

    switch (citizen.status) {
      case CitizenStatus.Infected: {
        embed.addFields({
          name: '–î–∞—Ç–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—è ‚ò£Ô∏è',
          value: toDiscordTime(citizen.infectionDate!)
        })

        const deadTime = isQuarantined ? QUARANTIME_TIME : DEATH_TIME

        embed.addFields({
          name: '–°–º–µ—Ä—Ç—å –±–µ–∑ –ª–µ—á–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏—Ç ‚è≥',
          value: toDiscordTime(
            new Date(citizen.infectionDate!.getTime() + deadTime),
            'R'
          )
        })
        break
      }

      case CitizenStatus.Recovered: {
        embed.addFields({
          name: '–î–∞—Ç–∞ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è üè•',
          value: toDiscordTime(citizen.recoveryDate!)
        })
        break
      }

      case CitizenStatus.Dead: {
        embed.addFields({
          name: '–î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏ ‚ö∞Ô∏è',
          value: toDiscordTime(citizen.deathDate!)
        })

        break
      }
    }

    await interaction.followUp({
      embeds: [embed]
    })
  }
}

function formatCitizenStatus(status: CitizenStatus): string {
  switch (status) {
    case CitizenStatus.Healthy:
      return '–ó–¥–æ—Ä–æ–≤ ‚ù§Ô∏è'

    case CitizenStatus.Infected:
      return '–ò–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚ò£Ô∏è'

    case CitizenStatus.Recovered:
      return '–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª üè•'

    case CitizenStatus.Dead:
      return '–ú—ë—Ä—Ç–≤ üíÄ'

    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
}
