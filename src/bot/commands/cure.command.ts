import { stripIndent } from 'common-tags'
import {
  ApplicationCommandOptionType,
  CommandInteraction,
  EmbedBuilder,
  GuildMember
} from 'discord.js'
import { Discord, Slash, SlashOption } from 'discordx'

import { CitizenStatus, Color } from '../../constants'
import { CitizenService } from '../../services/citizen.service'
import { ServerService } from '../../services/server.service'

@Discord()
export class CureCommand {
  private readonly citizenService = new CitizenService()
  private readonly serverService = new ServerService()

  @Slash({
    name: '–∏–∑–ª–µ—á–∏—Ç—å',
    description: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–ª–µ—á–∏—Ç—å –æ—Ç –±–æ–ª–µ–∑–Ω–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞'
  })
  public async cure(
    @SlashOption({
      type: ApplicationCommandOptionType.User,
      name: '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
      description: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–ª–µ—á–∏—Ç—å',
      required: true
    })
    target: GuildMember,
    interaction: CommandInteraction
  ) {
    const caller = await interaction.guild!.members.fetch(interaction.user.id)

    if (!caller) {
      return
    }

    const server = await this.serverService.getOne({
      guildId: interaction.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    if (!caller.roles.cache.has(server.nurseRoleId!)) {
      return interaction.reply({
        content: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –ª–µ—á–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω',
        ephemeral: true
      })
    }

    if (target.user.bot) {
      return interaction.reply({
        content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ª–µ—á–∏—Ç—å –±–æ—Ç–∞',
        ephemeral: true
      })
    }

    if (server.drugsCount < 1) {
      return interaction.reply({
        content: '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        ephemeral: true
      })
    }

    await interaction.deferReply()

    const citizen = await this.citizenService.getOne({
      userId: target.id,
      serverId: server.id,
      opts: {
        relations: {
          vaccinations: true
        }
      }
    })

    if (!citizen) {
      throw new Error('Citizen not found')
    }

    if (citizen.status === CitizenStatus.Dead) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ò–∑–ª–µ—á–µ–Ω–∏–µ',
            color: Color.Yellow,
            description: `–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${target} –ø–æ–∫–æ–∏—Ç—Å—è —Å –º–∏—Ä–æ–º ü™¶`
          })
        ]
      })
    }

    if (citizen.status === CitizenStatus.Recovered) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ò–∑–ª–µ—á–µ–Ω–∏–µ',
            color: Color.Yellow,
            description: `–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${target} —É–∂–µ –∏–∑–ª–µ—á–µ–Ω`
          })
        ]
      })
    }

    if (citizen.status !== CitizenStatus.Infected) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ò–∑–ª–µ—á–µ–Ω–∏–µ',
            color: Color.Yellow,
            description: `–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${target} –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ª–µ—á–µ–Ω–∏–∏`
          })
        ]
      })
    }

    await this.serverService.update({
      id: server.id,
      data: {
        drugsCount: server.drugsCount - 1
      }
    })

    await this.citizenService.markRecovered(citizen, false)

    await interaction.followUp({
      content: target.toString(),
      embeds: [
        new EmbedBuilder({
          title: '–ò–∑–ª–µ—á–µ–Ω–∏–µ',
          color: Color.Blue,
          description: stripIndent`
            –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω ${target} –±—ã–ª –∏–∑–ª–µ—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ${interaction.user}.
            –¢–µ–ø–µ—Ä—å –æ–Ω –Ω–µ –æ–ø–∞—Å–µ–Ω –¥–ª—è –æ–±—â–µ—Å—Ç–≤–∞ –∏ –º–æ–∂–µ—Ç –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é.
          `
        })
      ]
    })
  }

  @Slash({
    name: '–∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å',
    description: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞'
  })
  public async isolate(
    @SlashOption({
      type: ApplicationCommandOptionType.User,
      name: '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
      description: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å',
      required: true
    })
    target: GuildMember,
    interaction: CommandInteraction
  ) {
    const caller = await interaction.guild!.members.fetch(interaction.user.id)

    if (!caller) {
      return
    }

    const server = await this.serverService.getOne({
      guildId: interaction.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    if (!caller.roles.cache.has(server.nurseRoleId!)) {
      return interaction.reply({
        content: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω',
        ephemeral: true
      })
    }

    if (target.user.bot) {
      return interaction.reply({
        content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞',
        ephemeral: true
      })
    }

    await interaction.deferReply()

    const citizen = await this.citizenService.getOne({
      userId: target.id,
      serverId: server.id,
      opts: {
        relations: {
          vaccinations: true
        }
      }
    })

    if (!citizen) {
      throw new Error('Citizen not found')
    }

    // –£–∂–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
    if (target.roles.cache.has(server.quarantineRoleId!)) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
            color: Color.Yellow,
            description: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç –æ–±—â–µ—Å—Ç–≤–∞'
          })
        ]
      })
    }

    // –£–º–µ—Ä –∏–ª–∏ –µ—Å—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç
    if (
      citizen.vaccinations.length >= 2 ||
      citizen.status === CitizenStatus.Dead ||
      citizen.status === CitizenStatus.Recovered
    ) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
            color: Color.Yellow,
            description:
              citizen.status === CitizenStatus.Dead
                ? '–≠—Ç–æ–º—É –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω—É —É–∂–µ –Ω–∏—á–µ–º –Ω–µ –ø–æ–º–æ–∂–µ—à—å ü™¶'
                : '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –∏–º–µ–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –≤–∏—Ä—É—Å—É, –∏–∑–æ–ª—è—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
          })
        ]
      })
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω
    await target.roles.add(server.quarantineRoleId!)

    const quarantine = await interaction.guild!.channels.fetch(
      server.quarantineChannelId!
    )

    if (!quarantine?.isTextBased()) {
      return
    }

    await interaction.followUp({
      content: target.toString(),
      embeds: [
        new EmbedBuilder({
          title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
          color: Color.Yellow,
          description: `–í—ã –±—ã–ª–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –æ–±—â–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ${interaction.user}. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–∏–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ–º –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ.`
        })
      ]
    })
  }

  @Slash({
    name: '–≤—ã–ø—É—Å—Ç–∏—Ç—å',
    description: '–í—ã–ø—É—Å—Ç–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –∏–∑ –∏–∑–æ–ª—è—Ü–∏–∏'
  })
  public async release(
    @SlashOption({
      type: ApplicationCommandOptionType.User,
      name: '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
      description: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å',
      required: true
    })
    target: GuildMember,
    interaction: CommandInteraction
  ) {
    const caller = await interaction.guild!.members.fetch(interaction.user.id)

    if (!caller) {
      return
    }

    const server = await this.serverService.getOne({
      guildId: interaction.guildId!
    })

    if (!server || !server.isActive) {
      throw new Error('Server not found or inactive')
    }

    if (!caller.roles.cache.has(server.nurseRoleId!)) {
      return interaction.reply({
        content: '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω',
        ephemeral: true
      })
    }

    if (target.user.bot) {
      return interaction.reply({
        content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞',
        ephemeral: true
      })
    }

    await interaction.deferReply()

    const citizen = await this.citizenService.getOne({
      userId: target.id,
      serverId: server.id,
      opts: {
        relations: {
          vaccinations: true
        }
      }
    })

    if (!citizen) {
      throw new Error('Citizen not found')
    }

    // –£–∂–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
    if (!target.roles.cache.has(server.quarantineRoleId!)) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
            color: Color.Yellow,
            description:
              '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –Ω–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç –æ–±—â–µ—Å—Ç–≤–∞, –≤—ã–ø—É—Å–∫–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ'
          })
        ]
      })
    }

    // –ë–∞–≥? –í—ã–ø—É—Å–∫–∞–µ–º –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
    if (
      citizen.status === CitizenStatus.Dead ||
      citizen.status === CitizenStatus.Recovered
    ) {
      return target.roles.remove(server.quarantineRoleId!)
    }

    // –ò–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (citizen.status === CitizenStatus.Infected) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
            color: Color.Yellow,
            description:
              '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –≤—Å—ë –µ—â—ë —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Å–∏—Ç–µ–ª–µ–º –≤–∏—Ä—É—Å–∞, –≤—ã–ø—É—Å–∫–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ.'
          })
        ]
      })
    }

    // –ù–µ –¥–æ –∫–æ–Ω—Ü–∞ –≤–∞–∫—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω
    if (citizen.vaccinations.length > 0 && citizen.vaccinations.length < 2) {
      return interaction.followUp({
        embeds: [
          new EmbedBuilder({
            title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
            color: Color.Yellow,
            description:
              '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∞–∫—Ü–∏–Ω—ã, –≤—ã–ø—É—Å–∫–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ.'
          })
        ]
      })
    }

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
    await target.roles.remove(server.quarantineRoleId!)

    return interaction.followUp({
      content: target.toString(),
      embeds: [
        new EmbedBuilder({
          title: '–ö–∞—Ä–∞–Ω—Ç–∏–Ω',
          color: Color.Yellow,
          description: `–í—ã –±—ã–ª–∏ –≤—ã–ø—É—â–µ–Ω—ã –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ${interaction.user}. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–µ–π —Å–≤–æ–±–æ–¥–æ–π —Å–æ–±–ª—é–¥–∞—è –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏.`
        })
      ]
    })
  }
}
